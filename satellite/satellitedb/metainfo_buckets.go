// Copyright (C) 2019 Storj Labs, Inc.
// See LICENSE for copying information.

package satellitedb

import (
	"context"

	"github.com/skyrings/skyring-common/tools/uuid"
	"github.com/zeebo/errs"

	"storj.io/storj/pkg/storj"
	"storj.io/storj/satellite/metainfo"
	dbx "storj.io/storj/satellite/satellitedb/dbx"
)

var _ metainfo.Buckets = (*buckets)(nil)

// implementation of metainfo.Buckets interface repository using spacemonkeygo/dbx orm
type buckets struct {
	db dbx.Methods
}

func (buckets *buckets) Create(ctx context.Context, bucket *metainfo.Bucket) error {

}

func (buckets *buckets) Get(ctx context.Context, projectID uuid.UUID, name string) (*metainfo.Bucket, error) {

}

func (buckets *buckets) Delete(ctx context.Context, projectID uuid.UUID, name string) error {

}

func (buckets *buckets) List(ctx context.Context, projectID uuid.UUID, opts storj.BucketListOptions) (storj.BucketList, error) {

}

// bucketFromDBX is used for creating Project entity from autogenerated dbx.Project struct
func bucketFromDBX(bucket *dbx.Bucket) (*metainfo.Bucket, error) {
	if bucket == nil {
		return nil, errs.New("bucket parameter is nil")
	}

	id, err := bytesToUUID(bucket.Id)
	if err != nil {
		return nil, err
	}

	projectID, err := bytesToUUID(bucket.ProjectId)
	if err != nil {
		return nil, err
	}

	var attributionID uuid.UUID
	if bucket.AttributionId == nil {
		parsedID, err := bytesToUUID(bucket.AttributionId)
		if err != nil {
			return nil, err
		}
		attributionID = parsedID
	}

	return &metainfo.Bucket{
		ID: id,

		ProjectID:  projectID,
		Name:       string(bucket.Name),
		PathCipher: storj.Cipher(bucket.PathCipher),

		AttributionID: attributionID,
		CreatedAt:     bucket.CreatedAt,

		DefaultSegmentSize: int64(bucket.DefaultSegmentSize),
		DefaultEncryption: storj.EncryptionParameters{
			CipherSuite: storj.CipherSuite(bucket.DefaultEncryptionCiphersuite),
			BlockSize:   int32(bucket.DefaultEncryptionBlockSize),
		},
		DefaultRedundancy: storj.RedundancyScheme{
			Algorithm:      storj.RedundancyAlgorithm(bucket.DefaultRedundancyAlgorithm),
			ShareSize:      int32(bucket.DefaultRedundancyShareSize),
			RequiredShares: int16(bucket.DefaultRedundancyRequiredShares),
			RepairShares:   int16(bucket.DefaultRedundancyRepairShares),
			OptimalShares:  int16(bucket.DefaultRedundancyOptimalShares),
			TotalShares:    int16(bucket.DefaultRedundancyTotalShares),
		},
	}, nil
}
