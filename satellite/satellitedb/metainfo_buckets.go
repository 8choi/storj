// Copyright (C) 2019 Storj Labs, Inc.
// See LICENSE for copying information.

package satellitedb

import (
	"context"

	"github.com/skyrings/skyring-common/tools/uuid"
	"github.com/zeebo/errs"

	"storj.io/storj/pkg/storj"
	"storj.io/storj/satellite/console"
	"storj.io/storj/satellite/metainfo"
	dbx "storj.io/storj/satellite/satellitedb/dbx"
)

var _ metainfo.Buckets = (*buckets)(nil)

// implementation of metainfo.Buckets interface repository using spacemonkeygo/dbx orm
type buckets struct {
	db dbx.Methods
}

func (buckets *buckets) Create(ctx context.Context, bucket *metainfo.Bucket) error {

}

func (buckets *buckets) Get(ctx context.Context, projectID uuid.UUID, name string) (*metainfo.Bucket, error) {

}

func (buckets *buckets) Delete(ctx context.Context, projectID uuid.UUID, name string) error {

}

func (buckets *buckets) List(ctx context.Context, projectID uuid.UUID, opts storj.BucketListOptions) (storj.BucketList, error) {

}

// bucketFromDBX is used for creating Project entity from autogenerated dbx.Project struct
func bucketFromDBX(bucket *dbx.Bucket) (*metainfo.Bucket, error) {
	if bucket == nil {
		return nil, errs.New("bucket parameter is nil")
	}

	id, err := bytesToUUID(bucket.Id)
	if err != nil {
		return nil, err
	}

	u := &console.Project{
		ID:          id,
		Name:        project.Name,
		Description: project.Description,
		CreatedAt:   project.CreatedAt,
	}

	return u, nil
}
